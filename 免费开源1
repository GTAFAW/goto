 -- 来学习学习吧
 -- ESP 显示,函数 简单教程
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
 -- [[*图书馆是我的，就像垃圾箱一样
      *它跟踪稍后被破坏的连接，实例，函数，线程和对象]]
local Bin
do
	Bin = setmetatable({}, {
		__tostring = function()
			return "Bin"
		end,
	})
	Bin.__index = Bin
	function Bin.new(...)
		local self = setmetatable({}, Bin)
		return self:constructor(...) or self
	end
	function Bin:constructor()
	end
	function Bin:add(item)
		local node = {
			item = item,
		}
		if self.head == nil then
			self.head = node
		end
		if self.tail then
			self.tail.next = node
		end
		self.tail = node
		return self
	end
	function Bin:destroy()
		local head = self.head
		while head do
			local _binding = head
			local item = _binding.item
			if type(item) == "function" then
				item()
			elseif typeof(item) == "RBXScriptConnection" then
				item:Disconnect()
			elseif type(item) == "thread" then
				task.cancel(item)
			elseif item.destroy ~= nil then
				item:destroy()
			elseif item.Destroy ~= nil then
				item:Destroy()
			end
			head = head.next
			self.head = head
		end
	end
	function Bin:isEmpty()
		return self.head == nil
	end
end

--[[
    ----------------------
          变量和参考
    ----------------------
]]

local AIFolder : Folder = Workspace.Misc.AI
local LocalPlayer : Player = Players.LocalPlayer
local CurrentCamera = Workspace.CurrentCamera
local ScreenGui = Instance.new("ScreenGui")

--[[
    --------------------
          函数声明
    --------------------
    所有在所述代码中使用的所有功能
]]

function format(num)
    local formatted = string.format("%.1f", num)
    return formatted
end

function blackfunction(...)
    return ...
end

--[[
    ----------------
       自定义函数
    ----------------
    通过可携带代码使用的所有自定义功能
]]


local cloneref = cloneref or blackfunction

local function SafeGetService(service)
    return cloneref(service)
    
end

--[[
    ---------------------
         组成部分声明
    ---------------------
]]
local ESP
do
    ESP = setmetatable({}, {
        __tostring = function()
            return "ESP"
        end,
    })
    ESP.__index = ESP
    function ESP.new(...)
        local self = setmetatable({}, ESP)
        return self:constructor(...) or self
    end

    function ESP:constructor(entity : Model)
        self.bin = Bin.new()
        self.labels = {
            container = Instance.new("Frame"),
            name = Instance.new("TextLabel"),
            data = Instance.new("TextLabel"),
            listlayout = Instance.new('UIListLayout'),
        }
        -- 设置：
        self.instance = entity
        local attributes = entity:GetAttributes()
        self.attributes = attributes
        -- 接口：
        self:setLabels()
        -- 初始化：
        local bin = self.bin
        local instances = ESP.instances
        local _entity = entity
        local _self = self
        instances[_entity] = _self
        bin:add(function()
            local _entity_1 = entity
            -- ▼Map.delete ▼ -- 清理标记
            local _valueExisted = instances[_entity_1] ~= nil
            instances[_entity_1] = nil
            -- ▲ Map.delete ▲
            return _valueExisted
        end)
        entity.AncestryChanged:Connect(function(_, parent)
            return parent == nil and self:destroy()
        end)
        -- Manual update:
        self:update()
    end
   
    function ESP:setLabels()
        local _binding = self
        local labels = _binding.labels
        local instance = _binding.instance
        local bin = _binding.bin
        local _binding_1 = labels
        local container = _binding_1.container
        local name = _binding_1.name
        local data = _binding_1.data
        local listlayout = _binding_1.listlayout
        container.Visible = false
        container.AnchorPoint = Vector2.new(0.5, 0)
        container.BackgroundTransparency = 1
        name.BackgroundTransparency = 1
        name.Font = Enum.Font.Nunito
        name.Size = UDim2.new(1, 0, 0, 14)
        name.Text = instance.Name 
        name.TextSize = 14
        name.TextStrokeTransparency = 0.5
        data.BackgroundTransparency = 1
        data.Font = Enum.Font.Nunito
        data.Size = UDim2.new(1, 0, 0, 14)
        data.Text = "[0] [Anger : 0%] [Burst: 0%] [Choke: 100%] [Deflect: 0%]"
        data.TextSize = 12
        data.TextStrokeTransparency = 0.5
        listlayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        listlayout.SortOrder = Enum.SortOrder.LayoutOrder
        name.Parent = container
        data.Parent = container
        listlayout.Parent = container
        container.Parent = ScreenGui
        bin:add(container)
    end
    function ESP:setVisible(visible)
        local _binding = self
        local labels = _binding.labels
        local _binding_1 = labels
        local container = _binding_1.container
        container.Visible = visible
    end
    function ESP:update()
        local _binding_1 = self
        local labels = _binding_1.labels
        local _binding_2 = labels
        local container = _binding_2.container
        local name = _binding_2.name
        local data = _binding_2.data
        local listlayout = _binding_2.listlayout
        name.TextColor3 = Color3.new(1, 0, 0)
        data.TextColor3 = Color3.new(1, 1, 1)
        listlayout.Padding = UDim.new(0, -4)
        container.Size = UDim2.new(0, 300, 0, listlayout.AbsoluteContentSize.Y)
    end
    function ESP:destroy()
        return self.bin:destroy()
    end
    function ESP:render()
        local camera = CurrentCamera
        local instance = self.instance
        local attributes = self.attributes
        local labels = self.labels
        local _binding = labels
        local container = _binding.container
        local name = _binding.name
        local data = _binding.data
    
        local position, visible = camera:WorldToViewportPoint(instance.HumanoidRootPart.Position)
            
            if visible and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
            local scale = 1 / (position.Z * math.tan(math.rad(camera.FieldOfView * 0.5)) * 2) * 1000
            local width, height = math.floor(4.5 * scale), math.floor(6 * scale)
            local x, y = math.floor(position.X), math.floor(position.Y)
            local xPosition, yPosition = math.floor(x - width * 0.5), math.floor((y - height * 0.5) + (0.5 * scale))
            local vector2 = Vector2.new(xPosition, yPosition)
                
            attributes = instance:GetAttributes()
    
            local _valueExisted = container.Visible == false
            container.Visible = true
            name.Text = instance.Name
                
            local positionDiff = LocalPlayer.Character.HumanoidRootPart.Position - instance.HumanoidRootPart.Position
            data.Text = `[{format(positionDiff.Magnitude)}] [Anger: {format(attributes.Anger)}] [Choke : {format(attributes.ChokeMeter)}%] [Ground Slam : {format(attributes.Burst)}]`
    
            container.Position = UDim2.new(0, vector2.X, 0, vector2.Y + 3)
        else
            local _valueExisted_1 = container.Visible == true
            container.Visible = false
        end
    end
end

ESP.instances = {}
ESP.connections = Bin.new()

ESP.connections:add(AIFolder.ChildAdded:Connect(function(instance)
	task.spawn(function()
        repeat wait() until instance:FindFirstChild("HumanoidRootPart")
        if instance:IsA("Model") and instance:FindFirstChild("HumanoidRootPart") then
            ESP.new(instance)
        end
    end)
end))
ESP.connections:add(RunService.RenderStepped:Connect(function()
    for _, esp in pairs(ESP.instances) do
        esp:render()
    end
end))

for _, _n in pairs(AIFolder:GetChildren()) do
    if _n:FindFirstChild("Humanoid") then
        local suc, res = pcall(function()
            ESP.new(_n)
        end)
        if not suc then
            warn(res)
        end
    end
end

ScreenGui.DisplayOrder = 10
ScreenGui.IgnoreGuiInset = true
ScreenGui.Parent = SafeGetService(game:GetService('CoreGui'))
return 0


----------------2.0


-- Compiled with roblox-ts v2.3.0
--[[
	************************************************************
	 * These UTILITIES arent mine they are from TerminalVibes
	 ************************************************************
]]
local CoreGui = cloneref(game:GetService("CoreGui"))
local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
local Workspace = cloneref(game:GetService("Workspace"))
local Terrain = cloneref(Workspace.Terrain)
--[[
	***********************************************************
	 * VARIABLES
	 * Description: Variables referenced globally in the script
	 ***********************************************************
]]
local world_Assets = Workspace:WaitForChild("world_assets")
local static_Objects = world_Assets:WaitForChild("StaticObjects")
local sharedLibrary = ReplicatedStorage:WaitForChild("EmberSharedLibrary")
local gameShared = sharedLibrary:WaitForChild("GameShared")
local Items = gameShared:WaitForChild("Item")
-- eslint-disable-next-line prettier/prettier
local item_colors = {
	Ammo = Color3.new(0.964705, 1, 0.462745),
	Backpack = Color3.new(0.4, 0.8, 1),
	Eyewear = Color3.new(0.4, 0.8, 1),
	Helmet = Color3.new(0.4, 0.8, 1),
	Vest = Color3.new(0.4, 0.8, 1),
	Medical = Color3.new(0.6, 1, 0.25),
	Usables = Color3.new(0.6, 1, 0.25),
	Muzzle = Color3.new(0.6, 0.2, 1),
	Optic = Color3.new(0.6, 0.2, 1),
	Underbarrel = Color3.new(0.6, 0.2, 1),
	Primary = Color3.new(1, 0.4, 0.4),
	Melee = Color3.new(1, 0.4, 0.4),
	Sidearm = Color3.new(1, 0.4, 0.4),
	Throwable = Color3.new(1, 0.4, 0.4),
}
--[[
	***********************************************************
	 * UTILITIES
	 * Description: Helper functions and classes
	 ***********************************************************
]]
local Bin
do
	Bin = setmetatable({}, {
		__tostring = function()
			return "Bin"
		end,
	})
	Bin.__index = Bin
	function Bin.new(...)
		local self = setmetatable({}, Bin)
		return self:constructor(...) or self
	end
	function Bin:constructor()
	end
	function Bin:add(item)
		local node = {
			item = item,
		}
		if self.head == nil then
			self.head = node
		end
		if self.tail then
			self.tail.next = node
		end
		self.tail = node
		return item
	end
	function Bin:batch(...)
		local args = { ... }
		for _, item in args do
			local node = {
				item = item,
			}
			if self.head == nil then
				self.head = node
			end
			if self.tail then
				self.tail.next = node
			end
			self.tail = node
		end
		return args
	end
	function Bin:destroy()
		while self.head do
			local item = self.head.item
			if type(item) == "function" then
				item()
			elseif typeof(item) == "RBXScriptConnection" then
				item:Disconnect()
			elseif type(item) == "thread" then
				task.cancel(item)
			elseif item.destroy ~= nil then
				item:destroy()
			elseif item.Destroy ~= nil then
				item:Destroy()
			end
			self.head = self.head.next
		end
	end
	function Bin:isEmpty()
		return self.head == nil
	end
end
--[[
	***********************************************************
	 * MAIN COMPONENTS
	 * Description: Classes for specific entities/objects
	 ***********************************************************
]]
local BaseComponent
do
	BaseComponent = setmetatable({}, {
		__tostring = function()
			return "BaseComponent"
		end,
	})
	BaseComponent.__index = BaseComponent
	function BaseComponent.new(...)
		local self = setmetatable({}, BaseComponent)
		return self:constructor(...) or self
	end
	function BaseComponent:constructor(instance)
		self.instance = instance
		self.bin = Bin.new()
	end
	function BaseComponent:destroy()
		self.bin:destroy()
	end
end
--[[
	***********************************************************
	 * COMPONENTS
	 * Description: Classes for specific entities/objects
	 ***********************************************************
]]
local LootComponent
do
	local super = BaseComponent
	LootComponent = setmetatable({}, {
		__tostring = function()
			return "LootComponent"
		end,
		__index = super,
	})
	LootComponent.__index = LootComponent
	function LootComponent.new(...)
		local self = setmetatable({}, LootComponent)
		return self:constructor(...) or self
	end
	function LootComponent:constructor(configuration)
		super.constructor(self, configuration)
		self.data = configuration:GetAttributes()
		self.attachment = self:attachmentPoints()
		-- Initialize:
		self:createVisual()
		configuration.AncestryChanged:Connect(function(_, parent)
			return parent == nil and self:destroy()
		end)
	end
	function LootComponent:attachmentPoints()
		local _binding = self
		local data = _binding.data
		local bin = _binding.bin
		local instance = _binding.instance
		local Attachment = Instance.new("Attachment")
		-- really funny on how typescript handles if statements
		-- (speaking from a dude who has experience in luau)
		if data.CFrame ~= nil then
			Attachment.WorldCFrame = data.CFrame
		end
		if data.ItemId ~= nil then
			Attachment.Name = data.ItemId
		end
		Attachment.Parent = Terrain
		bin:add(Attachment)
		return Attachment
	end
	function LootComponent:createVisual()
		local _binding = self
		local data = _binding.data
		local attachment = _binding.attachment
		local bin = _binding.bin
		local _result
		if data.ClassName ~= nil then
			local _result_1 = Items:FindFirstChild(data.ClassName, true)
			if _result_1 ~= nil then
				_result_1 = _result_1.Parent
			end
			_result = _result_1
		else
			_result = nil
		end
		local _Item = _result
		-- Instances:
		local BillboardGui = Instance.new("BillboardGui")
		local TextLabel = Instance.new("TextLabel")
		-- Properties:
		BillboardGui.Adornee = attachment
		BillboardGui.AlwaysOnTop = true
		BillboardGui.ResetOnSpawn = false
		BillboardGui.Size = UDim2.new(0, 100, 0, 100)
		BillboardGui.MaxDistance = 500
		BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		TextLabel.BackgroundTransparency = 1
		TextLabel.Font = Enum.Font.Nunito
		TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
		TextLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
		TextLabel.Size = UDim2.new(1, 0, 0, 12)
		local _result_1 = data.ClassName
		if _result_1 ~= nil then
			_result_1 = string.gsub(_result_1, ".item", "")
		end
		TextLabel.Text = `[{_result_1}] ({data.Quantity}x)`
		--if (_Item !== undefined) {
		local _result_2 = _Item
		if _result_2 ~= nil then
			_result_2 = _result_2.Name
		end
		local _condition = _result_2
		if _condition == nil then
			_condition = "Default"
		end
		local _condition_1 = item_colors[_condition]
		if _condition_1 == nil then
			_condition_1 = Color3.new(0.5, 0.5, 0)
		end
		TextLabel.TextColor3 = _condition_1
		--} else {
		--TextLabel.TextColor3 = new Color3(0.5, 0.5, 0);
		--}
		TextLabel.TextSize = 12
		TextLabel.TextStrokeTransparency = 0.3
		-- Initialize:
		TextLabel.Parent = BillboardGui
		BillboardGui.Parent = CoreGui
		bin:add(BillboardGui)
	end
end
--[[
	***********************************************************
	 * CONTROLLERS
	 * Description: Singletons that are used once
	 ***********************************************************
]]
local LootController = {}
do
	local _container = LootController
	local onLoot = function(configuration)
		if configuration:IsA("Configuration") then
			LootComponent.new(configuration)
		end
	end
	local function __init()
		for _, child in static_Objects:GetDescendants() do
			task.spawn(onLoot, child)
		end
		static_Objects.DescendantAdded:Connect(function(descendant)
			if descendant:IsA("Configuration") then
				onLoot(descendant)
			end
		end)
	end
	_container.__init = __init
end
--[[
	***********************************************************
	 * INITIALIZATION
	 * Description: Initializes and starts the runtime
	 ***********************************************************
]]
LootController.__init()
return 0






